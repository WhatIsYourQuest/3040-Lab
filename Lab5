/*====================================================*/
/* Jake Neal and Cameron Shea */
/* ELEC 3040/3050 - Lab 5 */
/*====================================================*/
#include "STM32L1xx.h" /* Microcontroller information */
/* Define global variables */
int state=0;            //current state of the LEDs in counter1
int key=0;              //key that was pressed
int key_var=10          //counter for deciding to display key or counter (set to 10 so default is display counter)
int row=0;              //row number (1-4)
int column=0;           //column number (10n: 50-80)
unsigned char led1=0;   //state of LED1
unsigned char led2=0;   //state of LED2
unsigned char led3=0;   //state of LED3
unsigned char led4=0;   //state of LED4
/*---------------------------------------------------*/
/* Initialize GPIO pins used in the program */
// PA1        input           IRQ
// PB0-PB3    input/output    keypad rows
// PB4-PB7    input/output    keypad columns
// PC0-PC3    output          counter LEDs
/*---------------------------------------------------*/
void PinSetup () {
 /* Configure PA1 as input for IRQ */
 RCC->AHBENR |= 0x01;             // Enable GPIOA clock (bit 0) 
 GPIOA->MODER &= ~(0x00000000);   // General purpose input mode 
 /* Configure PC0-PC3 as output pins to drive LEDs */
 RCC->AHBENR |= 0x04;             // Enable GPIOC clock (bit 2) 
 GPIOC->MODER &= ~(0x000000FF);   // Clear PC0-PC3 mode bits 
 GPIOC->MODER |= (0x00000055);    // General purpose output mode for PC0-PC3*/
 
 //EXTI SECTION	
 SYSCFG->EXTICR[0] &= 0xFF0F;   //clears EXTI1 bit
 SYSCFG->EXTICR[0] |= 0x0000;   //set EXTI1 = 0 to select PA1
 EXTI->RTSR |= 0x0002;          //Bit0=1 to make EXTI1 rising-edge trig.
 EXTI->IMR  |= 0x0002;          //Bit0=1 to enable EXTI1
 EXTI->PR   |= 0x0002;          //Bit0=1 to clear EXTI1 pending status

	
 //NVIC SECTION
 NVIC_EnableIRQ(7);             //set bit n to enable IRQ7
 NVIC_ClearPendingIRQ (7);   // clears pending status
	
//CPU SECTION
__enable_irq();                 //enable interrupts

}

/*----------------------------------------------------------*/
/* EXTI1 Interrupt Function (signals the pressing of a keyboard button
/*----------------------------------------------------------*/
void EXTI1_IRQHandler () 
{
	int i,j,n;
   	for (i=0; i<20; i++)        //outer loop
	{
   		for (j=0; j<18; j++) 
		{ 		    //inner loop
   			n = j;      //dummy operation for single-step test
   		}                   //do nothing
        }
	key_var=0;
	GPIOB->PUPDR &= ~0x0000FFFF;     //clear bits 0-15 for PB0-PB7
        GPIOB->PUPDR |=  0x00005555;     //set bits 0-15 to 01 for PB0-PB7 pull-up
	
	GPIOC->MODER &= ~(0x000000FF);   // PB0-PB3    input    keypad rows
        GPIOC->MODER |= (0x00000000);    // ^^^^
	
        GPIOC->MODER &= ~(0x0000FF00);   // PB4-PB7    output    keypad columns
        GPIOC->MODER |= (0x00005500);    // ^^^^
	
	
	
	NVIC_ClearPendingIRQ (7);     // clears pending status
        EXTI->PR   |= 0x0002;         //Bit0=1 to clear EXTI1 pending status
}

/*----------------------------------------------------------*/
/* Delay function - do nothing for about .5 seconds */
/*----------------------------------------------------------*/
void delay () 
{
   int i,j,n;
   for (i=0; i<20; i++) { //outer loop
   for (j=0; j<8772; j++) { //inner loop
   n = j; //dummy operation for single-step test
   } //do nothing
   }
   
}
/*----------------------------------------------------------*/
/* Count - counts up or down based on value passed into function */
/*----------------------------------------------------------*/
void count (a) 
{  
   state=led1*1+led2*2+led3*4+led4*8;
   if(a==0) //incrementing
   {
      if(state==9)
      {
         state=0;
      }
      else
      {
         state++;
      }
   }
   if(led1%2==0)
   {
   	if(direction==1) //incrementing
   	{
      		if(state2==9)
      		{
        		state2=0;
        	}
                else
      		{
         		state2++;
      		}
   	}
	else
	{
      		if(state2==0)
      		{
        		state2=9;
        	}
                else
      		{
         		state2--;
      		}
   	}
	switch(state2)
	   {
	      case 0:
		 led5=0;
		 led6=0;
		 led7=0;
		 led8=0;
		 break;
	      case 1:
		 led5=1;
		 led6=0;
		 led7=0;
		 led8=0;
		 break;
	      case 2:
		 led5=0;
		 led6=1;
		 led7=0;
		 led8=0;
		 break;
	      case 3:
		 led5=1;
		 led6=1;
		 led7=0;
		 led8=0;
		 break;
	      case 4:
		 led5=0;
		 led6=0;
		 led7=1;
		 led8=0;
		 break;
	      case 5:
		 led5=1;
		 led6=0;
		 led7=1;
		 led8=0;
		 break;
	      case 6:
		 led5=0;
		 led6=1;
		 led7=1;
		 led8=0;
		 break;
	      case 7:
		 led5=1;
		 led6=1;
		 led7=1;
		 led8=0;
		 break;
	      case 8:
		 led5=0;
		 led6=0;
		 led7=0;
		 led8=1;
		 break;
	      case 9:
		 led5=1;
		 led6=0;
		 led7=0;
		 led8=1;
		 break;   
	   }
   }
	 else
	 {
	 
	 }
   switch(state)
   {
      case 0:
         led1=0;
         led2=0;
         led3=0;
         led4=0;
         break;
      case 1:
         led1=1;
         led2=0;
         led3=0;
         led4=0;
	 break;
      case 2:
         led1=0;
         led2=1;
         led3=0;
         led4=0;
	 break;
      case 3:
         led1=1;
         led2=1;
         led3=0;
         led4=0;
	 break;
      case 4:
         led1=0;
         led2=0;
         led3=1;
         led4=0;
	 break;
      case 5:
         led1=1;
         led2=0;
         led3=1;
         led4=0;
	 break;
      case 6:
         led1=0;
         led2=1;
         led3=1;
         led4=0;
	 break;
      case 7:
         led1=1;
         led2=1;
         led3=1;
         led4=0;
	 break;
      case 8:
         led1=0;
         led2=0;
         led3=0;
         led4=1;
	 break;
      case 9:
         led1=1;
         led2=0;
         led3=0;
         led4=1;
	 break;
   }
   if (led1 == 0)
   GPIOC->BSRR = 0x0001 << 16; 
   else
   GPIOC->BSRR = 0x0001;
   if (led2 == 0)
   GPIOC->BSRR = 0x0002 << 16; 
   else
   GPIOC->BSRR = 0x0002;
   if (led3 == 0)
   GPIOC->BSRR = 0x0004 << 16; 
   else
   GPIOC->BSRR = 0x0004;
   if (led4 == 0)
   GPIOC->BSRR = 0x0008 << 16; 
   else
   GPIOC->BSRR = 0x0008;
	 if (led5 == 0)
   GPIOC->BSRR = 0x0010 << 16; 
   else
   GPIOC->BSRR = 0x0010;
   if (led6 == 0)
   GPIOC->BSRR = 0x0020 << 16; 
   else
   GPIOC->BSRR = 0x0020;
   if (led7 == 0)
   GPIOC->BSRR = 0x0040 << 16; 
   else
   GPIOC->BSRR = 0x0040;
   if (led8 == 0)
   GPIOC->BSRR = 0x0080 << 16; 
   else
   GPIOC->BSRR = 0x0080;
}
/*------------------------------------------------*/
/* Main program */
/*------------------------------------------------*/
int main(void) 
{
   PinSetup(); //Configure GPIO pins
   
   //the infinite loop will begin by counting up from zero once SW1
while(1)
{
   count(0);
   delay();
}
}
